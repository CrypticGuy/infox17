<% content_for :pgcontent do %>
<div class="container tile" >

    <div class="row" style="margin-bottom: 0; display: table;">
      
        <a href="/uploads/<%=raw @event.image %>" target="_blank">
        <div class="col s12 m4 poster-back hide-on-small-only" >
        <div class="dotted">
        </div>
        </div>
        </a>
        <div class="col s12 m8 right-cell">
          <h3>
          <center class="hide-on-med-and-up">
              <img src="/uploads/<%=raw @event.image %>"  class="materialboxed" width="80%"%>
          </center>
          <center>
              <%=raw @event.Name%>
          </center>  
      </h3>
      <br>
      <% if  @event.Eventidm.to_i != 1%>
      <a href="/event?id=<%=raw @event.Eventidm.to_i - 1%>" style="float: left;margin-right: 20px; text-decoration: underline;">< Previous event </a>
      <% end %>
      <% if  @event.Eventidm != 20%>
      <a href="/event?id=<%=raw @event.Eventidm.to_i + 1%>" style="float: right;margin-right: 20px; text-decoration: underline;">Next event ></a>
      <% end %>     
            <div class="col s12" id="content-about">
            <%=raw @event.about%>
            </div>

            <div class="col s12">
            Venue:&nbsp;&nbsp;        <%=raw @event.venue%>
            </div>

            <div class="col s12">
            Date:&nbsp;&nbsp;&nbsp;   <%=raw @event.date%>
            </div>

            <div class="col s12">
            Time:&nbsp;&nbsp;&nbsp;   <%=raw @event.time%>
            </div>

            <div class="col s12">
            
              <a href="<%= @event.facebook_link%>" style="text-decoration: underline;">Facebook event page [<i class="fa fa-facebook fa-2x" aria-hidden="true"></i>]</a>
              <br>
              <br>
            </div>

           <div class="col s12">
             Contact:<br>
             <table class="centered">
                 <tbody>
                     <tr>
                        <td><%=raw @event.organizer1_name%></td>
                        <td><%= @event.organizer1_phone%></td>
                    </tr>
                    <tr>
                       <td><%=raw @event.organizer2_name%></td>
                       <td><%= @event.organizer2_phone%></td>
                   </tr>
                </tbody>
             </table>
           </div>
           <div class="col s12">
 
             <% if current_user%>
                 <% if  @event.Eventidm.to_i == 1%>
                  <div class="col s12 cta cta-container transition"><center><a href="https://uhack.hackerearth.com/">Register for Event </a></center></div>

                  <% elsif  @event.Eventidm.to_i == 23%>
                  <div class="col s12 cta cta-container transition"><center><a href="https://goo.gl/forms/ADm1NjmrnKUZuDf73">Register for Event </a></center></div>

                <%else%>
                 <%if @user%>
                     <a href="#">
                         <div class="col s12 cta cta-container transition"><center>already registered!</center></div>
                     </a>
                 <%else%> 

                     <div class="col s12 cta cta-container transition"><center><%= link_to "Register for Event ", url_for(controller: :event, action: :eventregister,:Eventidm=>@event.Eventidm), method: :post, :onclick => 'return confirm("Click yes to proceed.")';%></center></div>
               	<%end%>
                <%end%>
             <%else%>
                <button onclick="openModal()" class="col s12 cta cta-container transition">
                    Sign In To Register</button>
             <%end%>
           </div>
       </div>
    </div>
</div>
<div class="terminal"><div class="close-terminal">X</div></div>

<a href="#terminal" id="terminallink"><div class="terminallink"></div></a>
<% end %>

<% content_for :pgstyles do %>

  <style>

#content-about ul {
	list-style-type: circle;
}	

#content-about ul li{
	list-style-type: circle;
}	

  .tile
{
  transition: all 0.4s ease-out;
  box-shadow: 0px 35px 77px -17px rgba(0,0,0,0.44);
  overflow:hidden;
  font-family:'Cousine';
  border-top: 3px solid #fd5e3a;
  background: white;

  margin-top:10vh;
  margin-bottom:15vh;
 min-height: 500px;
}

  .cta {
    -moz-border-radius: 2px;
    -moz-transition: 0.2s ease-out;
    -ms-transition: 0.2s ease-out;
    -o-transition: 0.2s ease-out;
    -webkit-border-radius: 2px;
    -webkit-transition: 0.2s ease-out;
    background-clip: padding-box;
    border: 2px solid #3487f7;
    border-radius: 2px;
    color: #3487f7;
    display: inline-block;
    font-family: 'Raleway', sans-serif;
    font-size: 17px;
    font-weight: 400;
    height: 36px;
    letter-spacing: 0.5px;
    line-height: 36px;
    margin-bottom: 15px;
    padding: 0 2rem;
    text-transform: uppercase;
    transition: 0.2s ease-out;
    text-align: center;
}
.cta:hover {
    background-color: #3487f7;
    box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    color: #fff;
    -moz-box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    -webkit-box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}
.transition { transition: .3s cubic-bezier(.3, 0, 0, 1.3) }

.poster-back {
  padding:0px !important;
  background: url('/uploads/<%= @event.image%>');
  background-position: center center;
  background-repeat: no-repeat;
  background-size: cover;

  margin: 0;
  cursor: pointer;
  float: none;
  display: table-cell;
  height: 110vh;
}

 .dotted {
  padding: 2.25em 1.6875em;
  background-image: -webkit-repeating-radial-gradient(center center, rgba(0,0,0,.5), rgba(0,0,0,.5) 1px, transparent 1px, transparent 100%);
  background-image: -moz-repeating-radial-gradient(center center, rgba(0,0,0,.5), rgba(0,0,0,.5) 1px, transparent 1px, transparent 100%);
  background-image: -ms-repeating-radial-gradient(center center, rgba(0,0,0,.5), rgba(0,0,0,.5) 1px, transparent 1px, transparent 100%);
  background-image: repeating-radial-gradient(center center, rgba(0,0,0,.5), rgba(0,0,0,.5) 1px, transparent 1px, transparent 100%);
  -webkit-background-size: 3px 3px;
  -moz-background-size: 3px 3px;
  background-size: 3px 3px;
  background-color: rgba(0,0,0,0.4);
  font-family: 'Cousine', monospace;
  margin: 0;
  position: relative;
  height: 100%; 
  width: 100%;
  top: 0px;
  left: 0px;
  }

  .right-cell {
    float: none;
    display: table-cell;
    border-left: 3px solid #fd5e3a;
  }

  hr {
    height: 1px;
    border: 0;
    background-color: hsla(0,0%,100%,.25);
    margin: 0;
    display: block;
    border-right: 1px solid #fff;
    border-left: 24px solid #e8f2ff;
    border-left: 26px solid #e8f2ff;
}



.terminallink {
    background-color: rgb(70,70,70);
    position: fixed;
    right: 0px;
    top: 100px;
    width: 50px;
    height: 40px;
    font-size: 25px;
    z-index: 100000000;
    background-image: url('https://www.jsconfar.com/static/styles/images/backterminalhandle2.png');
    background-size: 100px 40px;
    background-position: 0 0;
    background-repeat: no-repeat;
    border: 2px solid #ccc;
    border-right: none;
    border-radius: 2px;
}

.terminal {
    position: fixed;
    top:0px;
    left: 0px;
    height: 100%;
    z-index: 100000000;
}

.Terminal {
    display: none; 
    overflow-x: hidden;
    color: white;
    background: rgba(0,0,0,0.8);
    border-right: 2px solid #f3622f;

}

.Terminal::-webkit-scrollbar {
    width: 0.5em;
}

.Terminal::-webkit-scrollbar-track {
    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.8);
}

.Terminal::-webkit-scrollbar-thumb {
  outline: 1px solid slategrey;

}

.close-terminal {
    position: absolute;
    top: 0px;
    right: 3px;
    background-color: #fd5e3a;
    outline: none;
    border-top: none;
    padding: 7px;
    color: black;
    margin-top: -2px;
    margin-right: -2px;
    cursor: pointer;
    -webkit-transition: all .5s ease-in 0s;
    -transition: all .5s ease-in 0s;
    -o-transition: all .5s ease-in 0s;
    transition: all .5s; 
}

@media(max-width: 700px){
    .Terminal {
      border-right: none;
    }

}
  </style>

<% end %>

<% content_for :pgscripts do%>

<script type="text/javascript">
/*! terminal.js v2.0 | (c) 2014 Erik Ã–sterberg | https://github.com/eosterberg/terminaljs */

var Terminal = (function () {
  // PROMPT_TYPE
  var PROMPT_INPUT = 1, PROMPT_PASSWORD = 2, PROMPT_CONFIRM = 3, PROMPT_LOAD = 4

  var fireCursorInterval = function (inputField, terminalObj) {
    var cursor = terminalObj._cursor
    setTimeout(function () {
      if (inputField.parentElement && terminalObj._shouldBlinkCursor) {
        cursor.style.visibility = cursor.style.visibility === 'visible' ? 'hidden' : 'visible'
        fireCursorInterval(inputField, terminalObj)
      } else {
        cursor.style.visibility = 'visible'
      }
    }, 500)
  }

  var firstPrompt = true;
  var promptInput = function (terminalObj, message, PROMPT_TYPE, callback) {
    var shouldDisplayInput = (PROMPT_TYPE === PROMPT_INPUT)
    var inputField = document.createElement('input')

    inputField.style.position = 'absolute'
    inputField.style.zIndex = '-100'
    inputField.style.outline = 'none'
    inputField.style.border = 'none'
    inputField.style.opacity = '0'
    inputField.style.fontSize = '0.2em'

    terminalObj._inputLine.textContent = ''
    terminalObj._input.style.display = 'block'
    terminalObj.html.appendChild(inputField)
    fireCursorInterval(inputField, terminalObj)

    if(typeof(message) === 'object'){
      if (PROMPT_TYPE === PROMPT_LOAD){
          if(!message.width) message.width=20;
          if(!message.text.length) message.text='Loading...';
          terminalObj.printraw('<span id=\''+message.name+'\'>'+message.text + '<span>');
          var lastProgress = 0;
          var bar = document.getElementById(message.name);
          function processCheck(){
            if (typeof(message.progress) === 'function')
              lastProgress = message.progress();
            if( lastProgress >=100){
              clearInterval(processInterval);
              bar.removeAttribute('id');
              if (typeof(callback) === 'function')callback();
            }else{
              var barWidth = Math.floor((message.progress()/100)*message.width);
              var sections = "";
              for(var i=0;i< message.width;i++){
                sections += (i<barWidth)?"=":(i==barWidth)?"|":"&nbsp;";
              }
              bar.innerHTML = message.text + " ["+sections+"]";
            }
          }
          var processInterval = setInterval(processCheck, 250);
      }
    }
    if (message.length) terminalObj.print(PROMPT_TYPE === PROMPT_CONFIRM ? message + ' (y/n)' : message);
 

    inputField.onblur = function () {
      terminalObj._cursor.style.display = 'none'
    }

    inputField.onfocus = function () {
      inputField.value = terminalObj._inputLine.textContent
      terminalObj._cursor.style.display = 'inline'
    }

    terminalObj.html.onclick = function () {
      inputField.focus()
    }

    inputField.onkeydown = function (e) {
      if (e.which === 37 || e.which === 39 || e.which === 38 || e.which === 40 || e.which === 9) {
        e.preventDefault()
      } else if (shouldDisplayInput && e.which !== 13) {
        setTimeout(function () {
          terminalObj._inputLine.textContent = inputField.value
        }, 1)
      }
    }
    inputField.onkeyup = function (e) {
      if (PROMPT_TYPE === PROMPT_CONFIRM || e.which === 13) {
        terminalObj._input.style.display = 'none'
        var inputValue = inputField.value
        if (shouldDisplayInput) {
          terminalObj.history.push(inputValue);
          terminalObj.lasthistory=terminalObj.history.length;
          terminalObj.print(inputValue)
        }
        terminalObj.html.removeChild(inputField)
        if (typeof(callback) === 'function') {
          if (PROMPT_TYPE === PROMPT_CONFIRM) {
            callback(inputValue.toUpperCase()[0] === 'Y' ? true : false)
          } else if(PROMPT_TYPE !== PROMPT_LOAD) callback(inputValue)
        }
      }
      if (PROMPT_TYPE === PROMPT_INPUT){
        if(e.which === 38 && terminalObj.lasthistory!=-1){
          inputField.value=terminalObj.history[(terminalObj.lasthistory-=1)>0?terminalObj.lasthistory:terminalObj.lasthistory=0];
          terminalObj._inputLine.textContent = inputField.value;
        }else if(e.which === 40 && terminalObj.lasthistory!=-1){
          inputField.value=terminalObj.history[(terminalObj.lasthistory+=1)< terminalObj.history.length?terminalObj.lasthistory:terminalObj.lasthistory=terminalObj.history.length];
          if(terminalObj.lasthistory==terminalObj.history.length) inputField.value="";
          terminalObj._inputLine.textContent = inputField.value;
        }
      }
    }
    if (firstPrompt) {
      firstPrompt = false
      setTimeout(function () { inputField.focus() }, 50)
    } else {
      inputField.focus()
    }
  }

  var terminalBeep

  var TerminalConstructor = function (id) {
    if (!terminalBeep) {
      terminalBeep = document.createElement('audio')
      var source = '<source src="http://www.erikosterberg.com/terminaljs/beep.'
      terminalBeep.innerHTML = source + 'mp3" type="audio/mpeg">' + source + 'ogg" type="audio/ogg">'
      terminalBeep.volume = 0.05
    }

    this.html = document.createElement('div')
    this.html.className = 'Terminal'
    if (typeof(id) === 'string') { this.html.id = id }

    this._innerWindow = document.createElement('div')
    this._output = document.createElement('p')
    this._inputLine = document.createElement('span') //the span element where the users input is put
    this._cursor = document.createElement('span')
    this._input = document.createElement('p') //the full element administering the user input, including cursor

    this._shouldBlinkCursor = true
    this.history =[]
    this.lasthistory=-1;
 
    this.beep = function () {
      terminalBeep.load()
      terminalBeep.play()
    }

    
    this.print = function(message) { 
      var newLine = document.createElement('div');
      newLine.textContent = message;
      this._output.appendChild(newLine);
    } 
    
    this.error = function(message) { 
      var newLine = document.createElement('div');
      newLine.style.color = 'red'
      newLine.textContent = message;
      this._output.appendChild(newLine);
      this.setTextColor('white')
    } 
    
    this.response = function(message) { 
      var i = 0, intervalId;
      var thing = this;
      var newLine = document.createElement('div');
      newLine.style.color = '#02ff02'
        intervalId = window.setInterval(function() {
        newLine.textContent += message.charAt(i++)
        thing._output.appendChild(newLine);
        if (i > message.length) 
                    window.clearInterval(intervalId);
      }, 100);
      
    } 
    
    this.clearHistory = function () {
      this.history = [];
      this.lasthistory = -1;
    }
  
    this.load = function (name, message, width, progress, callback){
      //message is what to show while loading. can be simple as "Loading..."
      //width is the loading bar in internal characters. Example 10 would be:
      //[=========>]
      //progress will be a function called to check status every half second
      //callback executes on full load.
      promptInput(this, {text:message, name: name, width: width, progress:progress}, PROMPT_LOAD, callback)
      
    }
          
    this.input = function (message, callback) {
      promptInput(this, message, PROMPT_INPUT, callback);
    }

    this.password = function (message, callback) {
      promptInput(this, message, PROMPT_PASSWORD, callback)
    }

    this.confirm = function (message, callback) {
      promptInput(this, message, PROMPT_CONFIRM, callback)
    }

    this.clear = function () {
      this.clearHistory();
      this._output.innerHTML = ''
    }
    
    this.printraw = function (message) {
      //follows innerHTML, thus html elements can be added to a page.
      var newLine = document.createElement('div')
      newLine.innerHTML = message
      this._output.appendChild(newLine)
    }

    this.sleep = function (milliseconds, callback) {
      setTimeout(callback, milliseconds)
    }

    this.setTextSize = function (size) {
      this._output.style.fontSize = size
      this._input.style.fontSize = size
    }

    this.setTextColor = function (col) {
      this.html.style.color = col
      this._cursor.style.background = col
    }

    this.setBackgroundColor = function (col) {
      this.html.style.background = col
    }

    this.setWidth = function (width) {
      this.html.style.width = width
    }

    this.setHeight = function (height) {
      this.html.style.height = height
    }

    this.blinkingCursor = function (bool) {
      bool = bool.toString().toUpperCase()
      this._shouldBlinkCursor = (bool === 'TRUE' || bool === '1' || bool === 'YES')
    }

    this._input.appendChild(this._inputLine)
    this._input.appendChild(this._cursor)
    this._innerWindow.appendChild(this._output)
    this._innerWindow.appendChild(this._input)
    this.html.appendChild(this._innerWindow)

    this.setTextSize('1em')
    this.setWidth('100%')
    this.setHeight('100%')

    this.html.style.fontFamily = 'Monaco, Courier'
    this.html.style.margin = '0'
    this.html.style.padding = '20px'
    
    this._input.style.margin = '0'
    this._output.style.margin = '0'
    this._cursor.style.background = 'white'
    this._cursor.innerHTML = 'C' //put something in the cursor..
    this._cursor.style.display = 'none' //then hide it
    this._input.style.display = 'none'
    
  }

  return TerminalConstructor
}())


var commands = {
  'help()' : function(terminal){ 
  for( var key in commands )
   if (commands.hasOwnProperty(key))
    terminal.response("|__ " + key);
  },
  'clear()' : function(terminal){ 
  terminal.clear();
  },
  'beep()' : function(terminal){ 
  terminal.beep();
  },
  'game' : function(terminal){ 
  // setTimeout(function(){window.location = "http://infoxpression.in/sliding.php"},5000);
  // terminal.response("|__############Initializing game###########__|");
  terminal.response("Lazy dev's still working on it :P");
  
  },
  'exit()' : function(terminal){ 
  terminal.response("|__########Exiting Terminal#######__|", function() {terminal.clear();});
  setTimeout(function() { $('.Terminal').css("display", "none");  
        if($( window ).width() < 700)
        $('.terminal').css("width", "0px"); }, 5000);


  },
  'sitemap' : function(terminal){ 
        $.ajax({
            type: 'GET',
            url: 'sitemap.php',
            data: 'id=data',
            dataType: 'json',
            cache: false,
            success: function(data) {
            terminal.print(data[0]);
            for( var i = 1; i < data.length ; i++)
                terminal.response(data[i]);
            },
          });
    
  },
  'signin_fb' : function(terminal) {
    window.location = "/users/auth/facebook";
  },
  'signin_google' : function(terminal) {
    window.location = "/users/auth/google_oauth2";
  }
}


console.log("Hey there fellow geek. Glad you found us!   -->");
//Go ahead. Try typing hunter in the browser.

var myTerminal = new Terminal();      
$(".terminal").append(myTerminal.html);


var tmr1 = undefined, tmr2 = undefined;
var A=1, B=1, flag = 0;


var getInput = function(){

myTerminal.input("", function (userInput1) {

if(commands.hasOwnProperty(userInput1.toLowerCase()))
  window["commands"][userInput1.toLowerCase()](myTerminal);
  
else if(userInput1)
  myTerminal.error(userInput1 + " is an unknown command");

getInput();
})
}

var getName = function(){ 

if(!flag) {
myTerminal.beep();
myTerminal.response("WhatÂ´s your name?[]:");

myTerminal.input(" ", function (userInput) {
  if(userInput)myTerminal.response("Hi, " + userInput + "!");
  else myTerminal.response("Hi, Nonamy-mous !");
    myTerminal.response("Type help() to see a list of commands ");
    getInput(); 
  })
}
else 
getInput();

flag = 1;
}


$('#terminallink').click(function() {
  event.preventDefault();
  slideinterminal();
});

function slideinterminal() {
  if ($('.Terminal').is(':hidden'))
    {
      $('.Terminal').css("display", "block");
      if($( window ).width() < 700)
      $('.terminal').css("width", "100%"); 
      getName();
    }
  else
    { 
        $('.Terminal').css("display", "none");  
        if($( window ).width() < 700)
        $('.terminal').css("width", "0px");  
    }

}

$('.close-terminal').click(function() {
      $('.Terminal').css("display", "none");  
      if($( window ).width() < 700)
      $('.terminal').css("width", "0px");
});


</script>
<% end %>