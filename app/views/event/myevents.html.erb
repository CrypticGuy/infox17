<% content_for :pgstyles do %>
    <%= stylesheet_link_tag "event/myevents" %>
<% end %>


<% content_for :pgcontent do %>
<!--Injected javascript for getting count-->
<div style="min-height:550px">
<script>
    object={count:0};
</script>
<!--Incremental Loop-->
<%@event.each do |v|%>
    <script>
        object.count+=1;
    </script>
<%end%>
<br>
<br>
<div class="container" style="margin-bottom:50px;color:white;">
<div class="row">
    <div class="col s12 m8">
    <div class="row">
        <center>
            <h4 style="margin-top: 0px;font-family: 'Julius Sans One', sans-serif;">
                My Events
            </h4>
            <div class="borderline"></div>
        </center>
    </div>
    <div class="row">
    <div class="col s12" style="background:rgba(0,0,0,0.8);border-radius: 5px;display:none;font-family : 'Julius Sans One', sans-serif; color:white" id="noevent">
        <center><br>
        <h5>Register and try again</h5>
         <p>You haven't registered for any events yet</p>
        <a class="registerevtbtn" href="/events">Register for events</a>
       <br>
       <br>
       <div class="row">
       <a href="#"><div class="col s6"><div class="flagship">Flagship event 1</div></div></a>
       <a href="#"><div class="col s6"><div class="flagship">Flagship event 2</div></div></a>
       </div>
       </center>
    </div>
    </div>
    <div class="row" id="eventhead" style="overflow-x:hidden;padding-left:0px">
        <%@event.each do |v|%>
            <% event=Event.find_by_id(v.id)%>
            <a class="modal-trigger" href="#<%= event.Eventidm%>mainmodal" style="color:white">
                    <div class="mycard" style="opacity:0.8;padding:0px;">
                        <div class="imageContainer" style="width:100%;height:75%;overflow:hidden;padding:0px">
                            <img src="/uploads/<%= event.image%>" style="width:100%;height:auto;max-width:100%">
                        </div>
                        <div class="name"style="width:100%;overflow:hidden;">
                            <h5><center><%=raw event.Name%></center></h5>
                        </div>
                    </div>
                </a>
            <!-- Modal Structure -->
            <div id="<%= event.Eventidm%>mainmodal" class="modal modal-fixed-footer">
                <div class="modal-content">
                    <div class="row">
                        <div class="col s12 m6">
                            <img src="/uploads/<%= event.image%>"width="100%">
                        </div>
                        <div class="col s12 m7">
                                <font color="black">
                                    <div class="row"style="background:rgba(0,0,0,1);color:white;padding-top:10px;padding-bottom:10px">
                                        <center><%=raw event.Name%>
                                        </center>
                                    </div>
                                    <%=raw event.about%>
                                    <hr>
                                    <u>Venue:</u>&nbsp;&nbsp;&nbsp;<%=raw event.venue%>
                                    <hr>
                                    <table class="striped">
                                       <tbody>
                                         <tr>
                                           <td>Date</td>
                                           <td><%= event.date%></td>
                                         </tr>
                                         <tr>
                                           <td>Time</td>
                                           <td>IST <%= event.time%></td>
                                         </tr>
                                       </tbody>
                                     </table>
                                     <hr>
                                     <a href="<%= event.facebook_link%>"style="color:black">Like and Follow us on Facebook for updates:
                                         <br>
                                         <i class="fa fa-facebook-square fa-3x" aria-hidden="true">
                                         </i>
                                     </a>
                                     <hr>
                                     Co-ordinators:
                                     <table class="striped">
                                        <tbody>
                                          <tr>
                                            <td><%= event.organizer1_name%></td>
                                            <td><%= event.organizer1_phone%></td>
                                          </tr>
                                          <tr>
                                            <td><%= event.organizer2_name%></td>
                                            <td><%= event.organizer2_phone%></td>
                                          </tr>
                                        </tbody>
                                      </table>
                                </font>
                        </div>
                    </div>
                </div>
                 <div class="modal-footer">
                     <a href="#!" class="modal-action modal-close waves-effect waves-green btn-flat ">Close</a>
                 </div>
            </div>
            <script>
                $(document).ready(function(){
                  // the "href" attribute of the modal trigger must specify the modal ID that wants to be triggered
                    $('#<%= event.Eventidm%>mainmodal').modal();
                });
             </script>
        <%end%>
    </div>
    </div>
    <div class="col s12 m4 center">
        <div  class="fb-page" data-href="https://www.facebook.com/infoxpression/" data-tabs="events" data-small-header="false" data-adapt-container-width="true" data-hide-cover="false" data-show-facepile="false"><blockquote cite="https://www.facebook.com/infoxpression/" class="fb-xfbml-parse-ignore"><a href="https://www.facebook.com/infoxpression/">InfoXpression</a></blockquote>
        </div>
    </div>
    </div>
 </div>
 </div>

 <% end %>



<% content_for :pgscripts do %>
<script src="/uploads/threedata/three.js"></script>
<script src="/uploads/threedata/Detector.js"></script>
<script src="/uploads/threedata/GPUComputationRenderer.js"></script>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_GB/sdk.js#xfbml=1&version=v2.8";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>
<!-- shader for bird's position -->

<script id="fragmentShaderPosition" type="x-shader/x-fragment">
    uniform float time;
    uniform float delta;
    void main() {
        vec2 uv = gl_FragCoord.xy / resolution.xy;
        vec4 tmpPos = texture2D( texturePosition, uv );
        vec3 position = tmpPos.xyz;
        vec3 velocity = texture2D( textureVelocity, uv ).xyz;
        float phase = tmpPos.w;
        phase = mod( ( phase + delta +
            length( velocity.xz ) * delta * 3. +
            max( velocity.y, 0.0 ) * delta * 6. ), 62.83 );
        gl_FragColor = vec4( position + velocity * delta * 15. , phase );
    }
</script>

<!-- shader for bird's velocity -->
<script id="fragmentShaderVelocity" type="x-shader/x-fragment">
    uniform float time;
    uniform float testing;
    uniform float delta; // about 0.016
    uniform float seperationDistance; // 20
    uniform float alignmentDistance; // 40
    uniform float cohesionDistance; //
    uniform float freedomFactor;
    uniform vec3 predator;
    const float width = resolution.x;
    const float height = resolution.y;
    const float PI = 3.141592653589793;
    const float PI_2 = PI * 2.0;
    // const float VISION = PI * 0.55;
    float zoneRadius = 40.0;
    float zoneRadiusSquared = 1600.0;
    float separationThresh = 0.45;
    float alignmentThresh = 0.65;
    const float UPPER_BOUNDS = BOUNDS;
    const float LOWER_BOUNDS = -UPPER_BOUNDS;
    const float SPEED_LIMIT = 9.0;
    float rand(vec2 co){
        return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
    }
    void main() {
        zoneRadius = seperationDistance + alignmentDistance + cohesionDistance;
        separationThresh = seperationDistance / zoneRadius;
        alignmentThresh = ( seperationDistance + alignmentDistance ) / zoneRadius;
        zoneRadiusSquared = zoneRadius * zoneRadius;
        vec2 uv = gl_FragCoord.xy / resolution.xy;
        vec3 birdPosition, birdVelocity;
        vec3 selfPosition = texture2D( texturePosition, uv ).xyz;
        vec3 selfVelocity = texture2D( textureVelocity, uv ).xyz;
        float dist;
        vec3 dir; // direction
        float distSquared;
        float seperationSquared = seperationDistance * seperationDistance;
        float cohesionSquared = cohesionDistance * cohesionDistance;
        float f;
        float percent;
        vec3 velocity = selfVelocity;
        float limit = SPEED_LIMIT;
        dir = predator * UPPER_BOUNDS - selfPosition;
        dir.z = 0.;
        // dir.z *= 0.6;
        dist = length( dir );
        distSquared = dist * dist;
        float preyRadius = 150.0;
        float preyRadiusSq = preyRadius * preyRadius;
        // move birds away from predator
        if (dist < preyRadius) {
            f = ( distSquared / preyRadiusSq - 1.0 ) * delta * 100.;
            velocity += normalize( dir ) * f;
            limit += 5.0;
        }
        // if (testing == 0.0) {}
        // if ( rand( uv + time ) < freedomFactor ) {}
        // Attract flocks to the center
        vec3 central = vec3( 0., 0., 0. );
        dir = selfPosition - central;
        dist = length( dir );
        dir.y *= 2.5;
        velocity -= normalize( dir ) * delta * 5.;
        for (float y=0.0;y<height;y++) {
            for (float x=0.0;x<width;x++) {
                vec2 ref = vec2( x + 0.5, y + 0.5 ) / resolution.xy;
                birdPosition = texture2D( texturePosition, ref ).xyz;
                dir = birdPosition - selfPosition;
                dist = length(dir);
                if (dist < 0.0001) continue;
                distSquared = dist * dist;
                if (distSquared > zoneRadiusSquared ) continue;
                percent = distSquared / zoneRadiusSquared;
                if ( percent < separationThresh ) { // low
                    // Separation - Move apart for comfort
                    f = (separationThresh / percent - 1.0) * delta;
                    velocity -= normalize(dir) * f;
                } else if ( percent < alignmentThresh ) { // high
                    // Alignment - fly the same direction
                    float threshDelta = alignmentThresh - separationThresh;
                    float adjustedPercent = ( percent - separationThresh ) / threshDelta;
                    birdVelocity = texture2D( textureVelocity, ref ).xyz;
                    f = ( 0.5 - cos( adjustedPercent * PI_2 ) * 0.5 + 0.5 ) * delta;
                    velocity += normalize(birdVelocity) * f;
                } else {
                    // Attraction / Cohesion - move closer
                    float threshDelta = 1.0 - alignmentThresh;
                    float adjustedPercent = ( percent - alignmentThresh ) / threshDelta;
                    f = ( 0.5 - ( cos( adjustedPercent * PI_2 ) * -0.5 + 0.5 ) ) * delta;
                    velocity += normalize(dir) * f;
                }
            }
        }
        // this make tends to fly around than down or up
        // if (velocity.y > 0.) velocity.y *= (1. - 0.2 * delta);
        // Speed Limits
        if ( length( velocity ) > limit ) {
            velocity = normalize( velocity ) * limit;
        }
        gl_FragColor = vec4( velocity, 1.0 );
    }
</script>

<script type="x-shader/x-vertex" id="birdVS">
    attribute vec2 reference;
    attribute float birdVertex;
    attribute vec3 birdColor;
    uniform sampler2D texturePosition;
    uniform sampler2D textureVelocity;
    varying vec4 vColor;
    varying float z;
    uniform float time;
    void main() {
        vec4 tmpPos = texture2D( texturePosition, reference );
        vec3 pos = tmpPos.xyz;
        vec3 velocity = normalize(texture2D( textureVelocity, reference ).xyz);
        vec3 newPosition = position;
        if ( birdVertex == 4.0 || birdVertex == 7.0 ) {
            // flap wings
            newPosition.y = sin( tmpPos.w ) * 5.;
        }
        newPosition = mat3( modelMatrix ) * newPosition;
        velocity.z *= -1.;
        float xz = length( velocity.xz );
        float xyz = 1.;
        float x = sqrt( 1. - velocity.y * velocity.y );
        float cosry = velocity.x / xz;
        float sinry = velocity.z / xz;
        float cosrz = x / xyz;
        float sinrz = velocity.y / xyz;
        mat3 maty =  mat3(
            cosry, 0, -sinry,
            0    , 1, 0     ,
            sinry, 0, cosry
        );
        mat3 matz =  mat3(
            cosrz , sinrz, 0,
            -sinrz, cosrz, 0,
            0     , 0    , 1
        );
        newPosition =  maty * matz * newPosition;
        newPosition += pos;
        z = newPosition.z;
        vColor = vec4( birdColor, 1.0 );
        gl_Position = projectionMatrix *  viewMatrix  * vec4( newPosition, 1.0 );
    }
</script>

<!-- bird geometry shader -->
<script type="x-shader/x-fragment" id="birdFS">
    varying vec4 vColor;
    varying float z;
    uniform vec3 color;
    void main() {
        // Fake colors for now
        float z2 = 0.2 + ( 1000. - z ) / 1000. * vColor.x;
        gl_FragColor = vec4( z2, z2, z2, 1. );
    }
</script>
<%= javascript_include_tag 'event/myevents' %>
<% end %>

